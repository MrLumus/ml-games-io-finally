[{"C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\pages\\games\\[slug]\\[id].js":"1","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\pages\\index.js":"2","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\pages\\_app.js":"3","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\currentGamePage\\CurrentGame.jsx":"4","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\currentGamePage\\Slider.jsx":"5","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\GamesGrid\\Game\\Game.jsx":"6","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\GamesGrid\\GamesGrid.jsx":"7","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\SearchButton\\SearchButton.jsx":"8","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\SearchInput\\SearchInput.jsx":"9","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\SelectList\\SelectList.jsx":"10","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\SelectListFilter\\SelectListFilter.jsx":"11","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\global\\Container\\Container.jsx":"12","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\global\\Loader\\Loader.jsx":"13","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\ListContainer\\ListContainer.js":"14"},{"size":167,"mtime":1661075336034,"results":"15","hashOfConfig":"16"},{"size":1479,"mtime":1661128271271,"results":"17","hashOfConfig":"16"},{"size":1065,"mtime":1661075336034,"results":"18","hashOfConfig":"16"},{"size":9621,"mtime":1661130137276,"results":"19","hashOfConfig":"16"},{"size":5067,"mtime":1661075336029,"results":"20","hashOfConfig":"16"},{"size":2553,"mtime":1661077231993,"results":"21","hashOfConfig":"16"},{"size":4575,"mtime":1661129606803,"results":"22","hashOfConfig":"16"},{"size":851,"mtime":1661075336030,"results":"23","hashOfConfig":"16"},{"size":949,"mtime":1661129467389,"results":"24","hashOfConfig":"16"},{"size":3034,"mtime":1661124301203,"results":"25","hashOfConfig":"16"},{"size":3029,"mtime":1661129529567,"results":"26","hashOfConfig":"16"},{"size":1169,"mtime":1661075336032,"results":"27","hashOfConfig":"16"},{"size":814,"mtime":1661075336032,"results":"28","hashOfConfig":"16"},{"size":2388,"mtime":1661129600730,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","suppressedMessages":"32","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"yrbooc",{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"36","messages":"37","suppressedMessages":"38","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45"},{"filePath":"46","messages":"47","suppressedMessages":"48","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"49","messages":"50","suppressedMessages":"51","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52"},{"filePath":"53","messages":"54","suppressedMessages":"55","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","suppressedMessages":"58","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"59","messages":"60","suppressedMessages":"61","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","suppressedMessages":"64","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68"},{"filePath":"69","messages":"70","suppressedMessages":"71","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"72","messages":"73","suppressedMessages":"74","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},"C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\pages\\games\\[slug]\\[id].js",[],[],"C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\pages\\index.js",[],[],"C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\pages\\_app.js",[],[],"C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\currentGamePage\\CurrentGame.jsx",["76"],[],"C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\currentGamePage\\Slider.jsx",["77","78"],[],"import { initScriptLoader } from \"next/script\";\r\nimport { useEffect, useState, Children, cloneElement, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst size = {\r\n  mobileS: \"320px\",\r\n  mobileM: \"375px\",\r\n  mobileL: \"425px\",\r\n  tablet: \"768px\",\r\n  laptop: \"1024px\",\r\n  laptopL: \"1440px\",\r\n};\r\n\r\nconst Wrapper = styled.div`\r\n  border-radius: 15px;\r\n  margin: 0 auto;\r\n  max-width: 100%;\r\n  display: flex;\r\n  align-items: center;\r\n  margin-bottom: 10px;\r\n  position: relative;\r\n  @media screen and (min-width: ${size.laptop}) {\r\n    margin-bottom: 20px;\r\n  }\r\n`;\r\nconst SliderWrapper = styled.div`\r\n  max-width: 100%;\r\n  overflow: hidden;\r\n  height: auto;\r\n  border-radius: 15px;\r\n\r\n  @media screen and (min-width: ${size.tablet}) {\r\n    height: auto;\r\n  }\r\n`;\r\nconst SliderLine = styled.div`\r\n  display: flex;\r\n  max-width: 100%;\r\n  transition: all ease 1s;\r\n`;\r\nconst SliderButton = styled.div`\r\n  cursor: pointer;\r\n  position: absolute;\r\n  border: none;\r\n  outline: none;\r\n  width: 30px;\r\n  height: 30px;\r\n  border-radius: 50%;\r\n  background-color: rgba(100, 100, 100, 0.5);\r\n  z-index: 2;\r\n  transition: 0.2s;\r\n\r\n  @media screen and (min-width: ${size.laptop}) {\r\n    width: 70px;\r\n    height: 70px;\r\n  }\r\n  @media screen and (min-width: ${size.laptopL}) {\r\n    width: 100px;\r\n    height: 100px;\r\n  }\r\n\r\n  :hover {\r\n    background-color: rgba(100, 100, 100, 0.8);\r\n  }\r\n\r\n  ::before {\r\n    content: \"\";\r\n    width: 10px;\r\n    height: 10px;\r\n    border-left: 2px solid rgba(255, 255, 255, 0.5);\r\n    border-bottom: 2px solid rgba(255, 255, 255, 0.5);\r\n    border-bottom-left-radius: 3px;\r\n    position: absolute;\r\n    left: 50%;\r\n    top: 50%;\r\n    transform: translate(-50%, -50%);\r\n\r\n    @media screen and (min-width: ${size.laptop}) {\r\n      width: 20px;\r\n      height: 20px;\r\n      border-left: 4px solid rgba(255, 255, 255, 0.5);\r\n      border-bottom: 4px solid rgba(255, 255, 255, 0.5);\r\n      border-bottom-left-radius: 7px;\r\n    }\r\n    @media screen and (min-width: ${size.laptopL}) {\r\n      width: 30px;\r\n      height: 30px;\r\n      border-left: 6px solid rgba(255, 255, 255, 0.5);\r\n      border-bottom: 6px solid rgba(255, 255, 255, 0.5);\r\n      border-bottom-left-radius: 10px;\r\n    }\r\n  }\r\n\r\n  :first-child {\r\n    margin-right: 5px;\r\n    left: 5px;\r\n    @media screen and (min-width: ${size.tablet}) {\r\n      left: 15px;\r\n    }\r\n    @media screen and (min-width: ${size.laptopL}) {\r\n      left: 25px;\r\n    }\r\n\r\n    ::before {\r\n      transform: translate(-40%, -50%) rotateZ(45deg);\r\n    }\r\n  }\r\n  :last-child {\r\n    margin-left: 5px;\r\n    right: 5px;\r\n    @media screen and (min-width: ${size.tablet}) {\r\n      right: 15px;\r\n    }\r\n    @media screen and (min-width: ${size.laptopL}) {\r\n      right: 25px;\r\n    }\r\n\r\n    ::before {\r\n      transform: translate(-60%, -50%) rotateZ(-135deg);\r\n    }\r\n  }\r\n`;\r\nconst Image = styled.img`\r\n  object-fit: cover;\r\n  min-height: 100%;\r\n  min-width: 100%;\r\n  max-width: 100%;\r\n\r\n  @media screen and (min-width: ${size.tablet}) {\r\n    height: 400px;\r\n  }\r\n  @media screen and (min-width: ${size.laptop}) {\r\n    height: 500px;\r\n  }\r\n  @media screen and (min-width: ${size.laptop}) {\r\n    height: 600px;\r\n  }\r\n`;\r\n\r\nconst Slider = ({ screenshots }) => {\r\n  const [images, setImages] = useState([]);\r\n  const [offset, setOffset] = useState(0);\r\n  const [width, setWidth] = useState(0);\r\n  const sliderRef = useRef(null);\r\n\r\n  useEffect(() => {\r\n    /*setImages(\r\n      Children.map(children, (child) => {\r\n        return cloneElement(child, {\r\n          style: {\r\n            minHeight: \"100%\",\r\n            minWidth: \"100%\",\r\n            maxWidth: \"100%\",\r\n          },\r\n        });\r\n      })\r\n    );*/\r\n\r\n    const resizeHandler = () => {\r\n      const _width = sliderRef.current.offsetWidth;\r\n      setWidth(_width);\r\n    };\r\n\r\n    window.addEventListener(\"resize\", resizeHandler);\r\n\r\n    return () => {\r\n      window.removeEventListener(\"resize\", resizeHandler);\r\n    };\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setWidth(sliderRef.current.offsetWidth);\r\n  }, [sliderRef.current]);\r\n\r\n  const handlerLeftArrowClick = () => {\r\n    setOffset((prev) => {\r\n      const newOffset = prev + width;\r\n      if (newOffset <= 0) return newOffset;\r\n      return prev;\r\n    });\r\n  };\r\n\r\n  const handlerRightArrowClick = () => {\r\n    setOffset((prev) => {\r\n      const newOffset = prev - width;\r\n      const maxOffset = width * (screenshots.length - 1) * -1;\r\n      if (newOffset >= maxOffset) return newOffset;\r\n      return prev;\r\n    });\r\n  };\r\n\r\n  return (\r\n    <Wrapper ref={sliderRef}>\r\n      <SliderButton onClick={handlerLeftArrowClick}></SliderButton>\r\n\r\n      <SliderWrapper>\r\n        <SliderLine\r\n          style={{\r\n            transform: `translateX(${offset}px)`,\r\n          }}\r\n        >\r\n          {}\r\n          {screenshots.map((screen) => {\r\n            return <Image key={screen.id} src={screen.image} />;\r\n          })}\r\n        </SliderLine>\r\n      </SliderWrapper>\r\n\r\n      <SliderButton onClick={handlerRightArrowClick}></SliderButton>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nexport default Slider;\r\n","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\GamesGrid\\Game\\Game.jsx",[],[],"C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\GamesGrid\\GamesGrid.jsx",["79","80","81"],[],"import styled from \"styled-components\";\r\nimport { connect, useDispatch } from \"react-redux\";\r\nimport Game from \"./Game/Game\";\r\nimport {\r\n  fetchGamesDataAC,\r\n  setFetchingTrueAC,\r\n  setPageDataAC,\r\n} from \"../../../redux/actions\";\r\nimport {\r\n  FETCH_ADDITIONAL_GAMES_DATA,\r\n  FETCH_GAMES_DATA,\r\n} from \"../../../redux/sagas/games-saga\";\r\nimport { useEffect } from \"react\";\r\n\r\nconst size = {\r\n  mobileS: \"320px\",\r\n  mobileM: \"375px\",\r\n  mobileL: \"425px\",\r\n  tablet: \"768px\",\r\n  laptop: \"1024px\",\r\n  laptopL: \"1440px\",\r\n};\r\n\r\nconst Grid = styled.div`\r\n  display: flex;\r\n  flex-direction: row;\r\n  flex-wrap: wrap;\r\n\r\n  @media screen and (min-width: ${size.tablet}) {\r\n    column-gap: calc(2% - 4px);\r\n  }\r\n  @media screen and (min-width: ${size.laptop}) {\r\n    column-gap: calc(2% - 4px);\r\n  }\r\n  @media screen and (min-width: ${size.laptopL}) {\r\n    column-gap: calc((100% - 24% * 4) / 3 - 2px);\r\n  }\r\n`;\r\n\r\nconst Wrapper = styled.div`\r\n  max-height: calc(100vh - 68px - 99px);\r\n  overflow: auto;\r\n  position: relative;\r\n  z-index: 0;\r\n\r\n  @media screen and (min-width: ${size.mobileL}) {\r\n    font-size: 25px;\r\n    max-height: calc(100vh - 74px - 98px);\r\n  }\r\n  @media screen and (min-width: ${size.tablet}) {\r\n    max-height: calc(100vh - 71px - 85px);\r\n  }\r\n  @media screen and (min-width: ${size.laptop}) {\r\n    max-height: calc(100vh - 91px - 109px);\r\n  }\r\n`;\r\n\r\nconst GamesGrid = ({\r\n  games,\r\n  order,\r\n  platform,\r\n  pageNum,\r\n  gameNameText,\r\n  searchStatus,\r\n  fetching,\r\n  isSortDown,\r\n  isLoading,\r\n  setFetchingTrue,\r\n  setPage,\r\n  fetchGamesData,\r\n}) => {\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (!isLoading) {\r\n      let ordering = \"\";\r\n      let platforms = \"\";\r\n      let page = \"\";\r\n      let search = \"\";\r\n\r\n      if (order) {\r\n        switch (order) {\r\n          case \"1\":\r\n            ordering = isSortDown ? \"rating\" : \"-rating\";\r\n            break;\r\n          case \"2\":\r\n            ordering = isSortDown ? \"released\" : \"-released\";\r\n            break;\r\n        }\r\n      }\r\n\r\n      if (platform) platforms = platform;\r\n      if (pageNum) page = pageNum;\r\n      if (gameNameText) search = gameNameText;\r\n\r\n      dispatch({\r\n        type: FETCH_ADDITIONAL_GAMES_DATA,\r\n        payload: {\r\n          ordering,\r\n          platforms,\r\n          page,\r\n          search,\r\n        },\r\n      });\r\n    }\r\n  }, [fetching]);\r\n\r\n  useEffect(() => {\r\n    setPage(1);\r\n    fetchGamesData();\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    setPage(1);\r\n    let ordering = \"\";\r\n    let platforms = \"\";\r\n    let page = \"\";\r\n    let search = \"\";\r\n    if (order) {\r\n      switch (order) {\r\n        case \"1\":\r\n          ordering = isSortDown ? \"rating\" : \"-rating\";\r\n          break;\r\n        case \"2\":\r\n          ordering = isSortDown ? \"released\" : \"-released\";\r\n          break;\r\n      }\r\n    }\r\n\r\n    if (platform) platforms = platform;\r\n    if (pageNum) page = pageNum;\r\n    if (gameNameText) search = gameNameText;\r\n\r\n    dispatch({\r\n      type: FETCH_GAMES_DATA,\r\n      payload: { ordering, platforms, page, search },\r\n    });\r\n  }, [order, platform, isSortDown, searchStatus]);\r\n\r\n  const scrollListener = (e) => {\r\n    if (e.target.scrollHeight - (e.target.scrollTop + window.innerHeight) < 0) {\r\n      setFetchingTrue();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Wrapper onScroll={scrollListener}>\r\n      <Grid>\r\n        {games.map((game, index) => {\r\n          if (game.id) {\r\n            return (\r\n              <Game\r\n                key={index}\r\n                dataId={game.id}\r\n                dataSlug={game.slug}\r\n                dataHref={`/games/${game.slug}/${game.id}`}\r\n                name={game.name}\r\n                rating={game.rating}\r\n                released={game.released}\r\n                poster={game.background_image}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n      </Grid>\r\n    </Wrapper>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    order: state.gamesPage.order,\r\n    platform: state.gamesPage.platform,\r\n    pageNum: state.gamesPage.pageNum,\r\n    isSortDown: state.gamesPage.isSortDown,\r\n    fetching: state.gamesPage.fetching,\r\n    searchStatus: state.gamesPage.searchStatus,\r\n    gameNameText: state.gamesPage.gameNameText,\r\n    games: state.gamesPage.games,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchGamesData: () => dispatch(fetchGamesDataAC()),\r\n    setFetchingTrue: () => dispatch(setFetchingTrueAC()),\r\n    setPage: (page) => dispatch(setPageDataAC(page)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(GamesGrid);\r\n","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\SearchButton\\SearchButton.jsx",[],[],"C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\SearchInput\\SearchInput.jsx",[],[],"C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\SelectList\\SelectList.jsx",[],[],"C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\SelectListFilter\\SelectListFilter.jsx",[],[],"C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\global\\Container\\Container.jsx",["82"],[],"import { useEffect, useRef } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst size = {\r\n  mobileS: \"320px\",\r\n  mobileM: \"375px\",\r\n  mobileL: \"425px\",\r\n  tablet: \"768px\",\r\n  laptop: \"1024px\",\r\n  laptopL: \"1440px\",\r\n};\r\n\r\nconst StyledContainer = styled.div`\r\n  max-width: auto;\r\n  margin: 0 auto;\r\n\r\n  @media screen and (min-width: 321px) {\r\n    max-width: ${size.mobileS};\r\n  }\r\n  @media screen and (min-width: ${size.mobileM}) {\r\n    max-width: ${size.mobileM};\r\n  }\r\n  @media screen and (min-width: ${size.mobileL}) {\r\n    max-width: ${size.mobileL};\r\n  }\r\n  @media screen and (min-width: ${size.tablet}) {\r\n    max-width: ${size.tablet};\r\n  }\r\n  @media screen and (min-width: ${size.laptop}) {\r\n    max-width: ${size.laptop};\r\n  }\r\n  @media screen and (min-width: ${size.laptopL}) {\r\n    max-width: ${size.laptopL};\r\n  }\r\n`;\r\n\r\nconst Container = ({ children, setWidth }) => {\r\n  const containerRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (setWidth) {\r\n      debugger;\r\n      setWidth(containerRef.current.offsetWidth);\r\n    }\r\n  }, []);\r\n\r\n  return <StyledContainer ref={containerRef}>{children}</StyledContainer>;\r\n};\r\n\r\nexport default Container;\r\n","C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\global\\Loader\\Loader.jsx",[],[],"C:\\Users\\MrLumus\\Documents\\GitHub\\ml-games-io-finally\\components\\gamesPage\\ListContainer\\ListContainer.js",["83"],[],"import React, { useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport SearchInput from \"../SearchInput/SearchInput\";\r\nimport SelectList from \"../SelectList/SelectList\";\r\nimport SelectListFilter from \"../SelectListFilter/SelectListFilter\";\r\nimport SearchButton from \"../SearchButton/SearchButton\";\r\nimport { connect } from \"react-redux\";\r\nimport {\r\n  fetchPlatformsDataAC,\r\n  setOrderDataAC,\r\n  setPlatformDataAC,\r\n  toggleSearchStatusAC,\r\n  toggleSortdownDataAC,\r\n  updateGameNameAC,\r\n} from \"../../../redux/actions\";\r\n\r\nconst size = {\r\n  mobileS: \"320px\",\r\n  mobileM: \"375px\",\r\n  mobileL: \"425px\",\r\n  tablet: \"768px\",\r\n  laptop: \"1024px\",\r\n  laptopL: \"1440px\",\r\n};\r\n\r\nconst ListWrapper = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  row-gap: 5px;\r\n  justify-content: flex-start;\r\n  align-items: center;\r\n  padding-bottom: 20px;\r\n\r\n  @media screen and (min-width: ${size.laptop}) {\r\n    padding-bottom: 40px;\r\n  }\r\n`;\r\n\r\nfunction ListContainer(props) {\r\n  useEffect(() => {\r\n    props.fetchPlatforms();\r\n  }, []);\r\n\r\n  const onGameNameTextChange = (text) => props.setGameNameText(text);\r\n  const handelSearchClick = () => props.toggleSearchStatus();\r\n\r\n  return (\r\n    <ListWrapper>\r\n      <SelectList\r\n        items={props.sorts}\r\n        toggleSort={props.toggleSort}\r\n        setOrder={props.setOrder}\r\n      />\r\n      <SelectListFilter\r\n        items={props.platforms}\r\n        setPlatform={props.setPlatform}\r\n      />\r\n      <SearchInput\r\n        gameNameText={props.gameNameText}\r\n        onTextChange={onGameNameTextChange}\r\n      />\r\n      <SearchButton clickHandler={handelSearchClick}></SearchButton>\r\n    </ListWrapper>\r\n  );\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    sorts: state.gamesPage.sorts,\r\n    platforms: state.gamesPage.platforms,\r\n    gameNameText: state.gamesPage.gameNameText,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    fetchPlatforms: () => dispatch(fetchPlatformsDataAC()),\r\n    setGameNameText: (text) => dispatch(updateGameNameAC(text)),\r\n    setOrder: (order) => dispatch(setOrderDataAC(order)),\r\n    toggleSort: () => dispatch(toggleSortdownDataAC()),\r\n    setPlatform: (platform) => dispatch(setPlatformDataAC(platform)),\r\n    toggleSearchStatus: () => dispatch(toggleSearchStatusAC()),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ListContainer);\r\n",{"ruleId":"84","severity":1,"message":"85","line":269,"column":6,"nodeType":"86","endLine":269,"endColumn":10,"suggestions":"87"},{"ruleId":"84","severity":1,"message":"88","line":173,"column":6,"nodeType":"86","endLine":173,"endColumn":25,"suggestions":"89"},{"ruleId":"90","severity":1,"message":"91","line":204,"column":20,"nodeType":"92","endLine":204,"endColumn":64},{"ruleId":"84","severity":1,"message":"93","line":106,"column":6,"nodeType":"86","endLine":106,"endColumn":16,"suggestions":"94"},{"ruleId":"84","severity":1,"message":"95","line":111,"column":6,"nodeType":"86","endLine":111,"endColumn":8,"suggestions":"96"},{"ruleId":"84","severity":1,"message":"97","line":138,"column":6,"nodeType":"86","endLine":138,"endColumn":49,"suggestions":"98"},{"ruleId":"84","severity":1,"message":"99","line":45,"column":6,"nodeType":"86","endLine":45,"endColumn":8,"suggestions":"100"},{"ruleId":"84","severity":1,"message":"85","line":43,"column":6,"nodeType":"86","endLine":43,"endColumn":8,"suggestions":"101"},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.","ArrayExpression",["102"],"React Hook useEffect has an unnecessary dependency: 'sliderRef.current'. Either exclude it or remove the dependency array. Mutable values like 'sliderRef.current' aren't valid dependencies because mutating them doesn't re-render the component.",["103"],"jsx-a11y/alt-text","Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'dispatch', 'gameNameText', 'isLoading', 'isSortDown', 'order', 'pageNum', and 'platform'. Either include them or remove the dependency array.",["104"],"React Hook useEffect has missing dependencies: 'fetchGamesData' and 'setPage'. Either include them or remove the dependency array. If 'setPage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["105"],"React Hook useEffect has missing dependencies: 'dispatch', 'gameNameText', 'pageNum', and 'setPage'. Either include them or remove the dependency array. If 'setPage' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["106"],"React Hook useEffect has a missing dependency: 'setWidth'. Either include it or remove the dependency array. If 'setWidth' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["107"],["108"],{"desc":"109","fix":"110"},{"desc":"111","fix":"112"},{"desc":"113","fix":"114"},{"desc":"115","fix":"116"},{"desc":"117","fix":"118"},{"desc":"119","fix":"120"},{"desc":"121","fix":"122"},"Update the dependencies array to be: [id, props]",{"range":"123","text":"124"},"Update the dependencies array to be: []",{"range":"125","text":"126"},"Update the dependencies array to be: [dispatch, fetching, gameNameText, isLoading, isSortDown, order, pageNum, platform]",{"range":"127","text":"128"},"Update the dependencies array to be: [fetchGamesData, setPage]",{"range":"129","text":"130"},"Update the dependencies array to be: [order, platform, isSortDown, searchStatus, setPage, pageNum, gameNameText, dispatch]",{"range":"131","text":"132"},"Update the dependencies array to be: [setWidth]",{"range":"133","text":"134"},"Update the dependencies array to be: [props]",{"range":"135","text":"136"},[5774,5778],"[id, props]",[4029,4048],"[]",[2348,2358],"[dispatch, fetching, gameNameText, isLoading, isSortDown, order, pageNum, platform]",[2430,2432],"[fetchGamesData, setPage]",[3058,3101],"[order, platform, isSortDown, searchStatus, setPage, pageNum, gameNameText, dispatch]",[1052,1054],"[setWidth]",[1040,1042],"[props]"]